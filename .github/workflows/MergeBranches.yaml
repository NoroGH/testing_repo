name: Merge Branches
run-name: Merge ${{ github.event.inputs.source_branch }} to ${{ github.event.inputs.target_branch }}

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: 'Source branch (staging/develop)'
        required: true
        type: choice
        options:
          - staging
          - develop
      target_branch:
        description: 'Target branch (master/develop/staging)'
        required: true
        type: choice
        options:
          - master
          - develop
          - staging

permissions:
  id-token: write
  contents: read

jobs:
  merge_branches:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Validate branch combination
        run: |
          if [[ "${{ github.event.inputs.source_branch }}" == "${{ github.event.inputs.target_branch }}" ]]; then
            echo "Error: Source and target branches cannot be the same"
            exit 1
          fi

          if [[ "${{ github.event.inputs.source_branch }}" == "develop" && "${{ github.event.inputs.target_branch }}" == "master" ]]; then
            echo "Error: Cannot merge develop directly to master"
            exit 1
          fi

      - name: Merge branches
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git config pull.rebase false
          git checkout ${{ github.event.inputs.target_branch }}
          git pull origin ${{ github.event.inputs.target_branch }}
          git pull origin ${{ github.event.inputs.source_branch }}
          git push origin ${{ github.event.inputs.target_branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Update Issue Labels
        if: github.event.inputs.source_branch == 'develop' && github.event.inputs.target_branch == 'staging'
        run: |
          export ISSUES=$(gh issue list \
            --label "${SOURCE_BRANCH^}" \
            --state all \
            --json url,number,title,assignees \
            --limit 100)

          echo "ISSUES=$ISSUES" >> $GITHUB_ENV

          for issue in $(echo "$ISSUES" | jq -r '.[].number'); do
            gh issue edit $issue --remove-label "Develop"
            gh issue edit $issue --add-label "Staging"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SOURCE_BRANCH: ${{ github.event.inputs.source_branch }}

      - name: Send Slack Notification
        if: github.event.inputs.source_branch == 'develop' && github.event.inputs.target_branch == 'staging'
        run: |
          message="*${TARGET_BRANCH^} deployment has started.* The following issues are included in this release:\n"
          issue_lines=""

          issue_lines=$(echo "$ISSUES" | jq -r '.[] | "\(.url)|\(.number)|\(.assignees[].login // "Unassigned")|\(.title)"' | \
            while IFS='|' read -r url number assignees title; do
              echo "â€¢ <$url|#$number>($assignees) $title"
            done)

          message+="$issue_lines"

          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$message\", \"mrkdwn\": true}" \
            ${SLACK_WEBHOOK_URL}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TARGET_BRANCH: ${{ github.event.inputs.target_branch }}
